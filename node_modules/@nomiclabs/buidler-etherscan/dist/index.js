"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const task_names_1 = require("@nomiclabs/buidler/builtin-tasks/task-names");
const config_1 = require("@nomiclabs/buidler/config");
const plugins_1 = require("@nomiclabs/buidler/plugins");
const AbiEncoder_1 = __importDefault(require("./AbiEncoder"));
const config_2 = require("./config");
const EtherscanService_1 = require("./etherscan/EtherscanService");
const EtherscanVerifyContractRequest_1 = require("./etherscan/EtherscanVerifyContractRequest");
const SolcVersions_1 = require("./solc/SolcVersions");
config_1.task("verify-contract", "Verifies contract on etherscan")
    .addParam("contractName", "Name of the deployed contract")
    .addParam("address", "Deployed address of smart contract")
    .addOptionalParam("libraries", 'Stringified JSON object in format of {library1: "0x2956356cd2a2bf3202f771f50d3d14a367b48071"}')
    .addOptionalVariadicPositionalParam("constructorArguments", "arguments for contract constructor", [])
    .setAction(async (taskArgs, { config, run }) => {
    const etherscan = config_2.getDefaultEtherscanConfig(config);
    if (etherscan.apiKey === undefined || etherscan.apiKey.trim() === "") {
        throw new plugins_1.BuidlerPluginError("Please provide etherscan api token via buidler.config.js (etherscan.apiKey)");
    }
    const index = taskArgs.contractName.indexOf(":");
    let etherscanContractName;
    let contractName;
    if (index !== -1) {
        etherscanContractName = taskArgs.contractName;
        contractName = taskArgs.contractName.substring(index + 1);
    }
    else {
        etherscanContractName = `contracts/${taskArgs.contractName}.sol:${taskArgs.contractName}`;
        contractName = taskArgs.contractName;
    }
    await run(task_names_1.TASK_COMPILE);
    const abi = (await plugins_1.readArtifact(config.paths.artifacts, contractName))
        .abi;
    config.solc.fullVersion = await SolcVersions_1.getLongVersion(config.solc.version);
    const source = JSON.stringify(await run(task_names_1.TASK_COMPILE_GET_COMPILER_INPUT));
    const request = EtherscanVerifyContractRequest_1.toRequest({
        apiKey: etherscan.apiKey,
        contractAddress: taskArgs.address,
        sourceCode: source,
        contractName: `${etherscanContractName}`,
        compilerVersion: config.solc.fullVersion,
        // optimizationsUsed: config.solc.optimizer.enabled,
        // runs: config.solc.optimizer.runs,
        constructorArguments: AbiEncoder_1.default.encodeConstructor(abi, taskArgs.constructorArguments),
        libraries: taskArgs.libraries,
    });
    const response = await EtherscanService_1.verifyContract(etherscan.url, request);
    console.log(`Successfully submitted contract at ${taskArgs.address} for verification on etherscan. Waiting for verification result...`);
    await EtherscanService_1.getVerificationStatus(etherscan.url, response.message);
    console.log("Successfully verified contract on etherscan");
});
//# sourceMappingURL=index.js.map