"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugins_1 = require("@nomiclabs/buidler/plugins");
const request_promise_1 = __importDefault(require("request-promise"));
async function delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
async function verifyContract(url, req) {
    try {
        const response = new EtherscanResponse(
        // tslint:disable-next-line: await-promise
        await request_promise_1.default.post(url, { form: req, json: true }));
        if (!response.isOk()) {
            throw new plugins_1.BuidlerPluginError(response.message);
        }
        return response;
    }
    catch (error) {
        throw new plugins_1.BuidlerPluginError(`Failed to send contract verification request. Reason: ${error.message}`, error);
    }
}
exports.verifyContract = verifyContract;
async function getVerificationStatus(url, guid) {
    try {
        const response = new EtherscanResponse(
        // tslint:disable-next-line: await-promise
        await request_promise_1.default.get(url, {
            json: true,
            qs: {
                module: "contract",
                action: "checkverifystatus",
                guid,
            },
        }));
        if (response.isPending()) {
            await delay(3000);
            return getVerificationStatus(url, guid);
        }
        if (!response.isOk()) {
            throw new plugins_1.BuidlerPluginError(response.message);
        }
        return response;
    }
    catch (error) {
        throw new plugins_1.BuidlerPluginError(`Failed to verify contract. Reason: ${error.message}`);
    }
}
exports.getVerificationStatus = getVerificationStatus;
class EtherscanResponse {
    constructor(response) {
        this.status = parseInt(response.status, 10);
        this.message = response.result;
    }
    isPending() {
        return this.message === "Pending in queue";
    }
    isOk() {
        return this.status === 1;
    }
}
exports.default = EtherscanResponse;
//# sourceMappingURL=EtherscanService.js.map