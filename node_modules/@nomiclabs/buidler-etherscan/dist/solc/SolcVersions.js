"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugins_1 = require("@nomiclabs/buidler/plugins");
const request_promise_1 = __importDefault(require("request-promise"));
const COMPILERS_LIST_URL = "https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/list.json";
async function getVersions() {
    try {
        // tslint:disable-next-line: await-promise
        return await request_promise_1.default.get(COMPILERS_LIST_URL, { json: true });
    }
    catch (e) {
        throw new plugins_1.BuidlerPluginError(`Failed to obtain full solc version. Reason: ${e.message}`);
    }
}
exports.getVersions = getVersions;
async function getLongVersion(shortVersion) {
    const versions = await getVersions();
    const fullVersion = versions.releases[shortVersion];
    if (fullVersion === undefined || fullVersion === "") {
        throw new plugins_1.BuidlerPluginError("Given solc version doesn't exists");
    }
    return fullVersion.replace(/(soljson-)(.*)(.js)/, "$2");
}
exports.getLongVersion = getLongVersion;
//# sourceMappingURL=SolcVersions.js.map