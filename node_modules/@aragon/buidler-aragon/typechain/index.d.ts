/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface AbstractENSContract
  extends Truffle.Contract<AbstractENSInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AbstractENSInstance>;
}

export interface AcceptOracleContract
  extends Truffle.Contract<AcceptOracleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AcceptOracleInstance>;
}

export interface ACLContract extends Truffle.Contract<ACLInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ACLInstance>;
}

export interface APMNamehashMockContract
  extends Truffle.Contract<APMNamehashMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<APMNamehashMockInstance>;
}

export interface APMRegistryContract
  extends Truffle.Contract<APMRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<APMRegistryInstance>;
}

export interface APMRegistryFactoryContract
  extends Truffle.Contract<APMRegistryFactoryInstance> {
  "new"(
    _daoFactory: string | BigNumber,
    _registryBase: string | BigNumber,
    _repoBase: string | BigNumber,
    _ensSubBase: string | BigNumber,
    _ens: string | BigNumber,
    _ensFactory: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<APMRegistryFactoryInstance>;
}

export interface APMRegistryFactoryMockContract
  extends Truffle.Contract<APMRegistryFactoryMockInstance> {
  "new"(
    _daoFactory: string | BigNumber,
    _registryBase: string | BigNumber,
    _repoBase: string | BigNumber,
    _ensSubBase: string | BigNumber,
    _ensFactory: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<APMRegistryFactoryMockInstance>;
}

export interface AppProxyBaseContract
  extends Truffle.Contract<AppProxyBaseInstance> {
  "new"(
    _kernel: string | BigNumber,
    _appId: string | BigNumber,
    _initializePayload: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyBaseInstance>;
}

export interface AppProxyFactoryContract
  extends Truffle.Contract<AppProxyFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppProxyFactoryInstance>;
}

export interface AppProxyPinnedContract
  extends Truffle.Contract<AppProxyPinnedInstance> {
  "new"(
    _kernel: string | BigNumber,
    _appId: string | BigNumber,
    _initializePayload: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyPinnedInstance>;
}

export interface AppProxyPinnedStorageMockContract
  extends Truffle.Contract<AppProxyPinnedStorageMockInstance> {
  "new"(
    _mockKernel: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyPinnedStorageMockInstance>;
}

export interface AppProxyUpgradeableContract
  extends Truffle.Contract<AppProxyUpgradeableInstance> {
  "new"(
    _kernel: string | BigNumber,
    _appId: string | BigNumber,
    _initializePayload: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyUpgradeableInstance>;
}

export interface AppStorageContract
  extends Truffle.Contract<AppStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStorageInstance>;
}

export interface AppStorageMockContract
  extends Truffle.Contract<AppStorageMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStorageMockInstance>;
}

export interface AppStubContract extends Truffle.Contract<AppStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStubInstance>;
}

export interface AppStub2Contract extends Truffle.Contract<AppStub2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStub2Instance>;
}

export interface AppStubConditionalRecoveryContract
  extends Truffle.Contract<AppStubConditionalRecoveryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AppStubConditionalRecoveryInstance>;
}

export interface AppStubDepositableContract
  extends Truffle.Contract<AppStubDepositableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStubDepositableInstance>;
}

export interface AppStubScriptRunnerContract
  extends Truffle.Contract<AppStubScriptRunnerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AppStubScriptRunnerInstance>;
}

export interface AppStubStorageContract
  extends Truffle.Contract<AppStubStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStubStorageInstance>;
}

export interface AragonAppContract extends Truffle.Contract<AragonAppInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AragonAppInstance>;
}

export interface AssertContract extends Truffle.Contract<AssertInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AssertInstance>;
}

export interface AutopetrifiedContract
  extends Truffle.Contract<AutopetrifiedInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AutopetrifiedInstance>;
}

export interface BaseEVMScriptExecutorContract
  extends Truffle.Contract<BaseEVMScriptExecutorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<BaseEVMScriptExecutorInstance>;
}

export interface CallsScriptContract
  extends Truffle.Contract<CallsScriptInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CallsScriptInstance>;
}

export interface ConditionalOracleContract
  extends Truffle.Contract<ConditionalOracleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ConditionalOracleInstance>;
}

export interface DAOFactoryContract
  extends Truffle.Contract<DAOFactoryInstance> {
  "new"(
    _baseKernel: string | BigNumber,
    _baseACL: string | BigNumber,
    _regFactory: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DAOFactoryInstance>;
}

export interface DelegateProxyContract
  extends Truffle.Contract<DelegateProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DelegateProxyInstance>;
}

export interface DepositableDelegateProxyContract
  extends Truffle.Contract<DepositableDelegateProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DepositableDelegateProxyInstance>;
}

export interface DepositableDelegateProxyMockContract
  extends Truffle.Contract<DepositableDelegateProxyMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DepositableDelegateProxyMockInstance>;
}

export interface DepositableStorageContract
  extends Truffle.Contract<DepositableStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DepositableStorageInstance>;
}

export interface DepositableStorageMockContract
  extends Truffle.Contract<DepositableStorageMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DepositableStorageMockInstance>;
}

export interface EmptyDataReturnOracleContract
  extends Truffle.Contract<EmptyDataReturnOracleInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EmptyDataReturnOracleInstance>;
}

export interface ENSContract extends Truffle.Contract<ENSInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ENSInstance>;
}

export interface ENSConstantsMockContract
  extends Truffle.Contract<ENSConstantsMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ENSConstantsMockInstance>;
}

export interface ENSFactoryContract
  extends Truffle.Contract<ENSFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ENSFactoryInstance>;
}

export interface ENSSubdomainRegistrarContract
  extends Truffle.Contract<ENSSubdomainRegistrarInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ENSSubdomainRegistrarInstance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20Instance>;
}

export interface ERCProxyContract extends Truffle.Contract<ERCProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERCProxyInstance>;
}

export interface ERCProxyMockContract
  extends Truffle.Contract<ERCProxyMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERCProxyMockInstance>;
}

export interface EtherTokenConstantMockContract
  extends Truffle.Contract<EtherTokenConstantMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EtherTokenConstantMockInstance>;
}

export interface EthSenderContract extends Truffle.Contract<EthSenderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EthSenderInstance>;
}

export interface EVMScriptExecutorMockContract
  extends Truffle.Contract<EVMScriptExecutorMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EVMScriptExecutorMockInstance>;
}

export interface EVMScriptExecutorNoReturnMockContract
  extends Truffle.Contract<EVMScriptExecutorNoReturnMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EVMScriptExecutorNoReturnMockInstance>;
}

export interface EVMScriptExecutorRevertMockContract
  extends Truffle.Contract<EVMScriptExecutorRevertMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EVMScriptExecutorRevertMockInstance>;
}

export interface EVMScriptRegistryContract
  extends Truffle.Contract<EVMScriptRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EVMScriptRegistryInstance>;
}

export interface EVMScriptRegistryConstantsMockContract
  extends Truffle.Contract<EVMScriptRegistryConstantsMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EVMScriptRegistryConstantsMockInstance>;
}

export interface EVMScriptRegistryFactoryContract
  extends Truffle.Contract<EVMScriptRegistryFactoryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EVMScriptRegistryFactoryInstance>;
}

export interface EVMScriptRunnerContract
  extends Truffle.Contract<EVMScriptRunnerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EVMScriptRunnerInstance>;
}

export interface ExecutionTargetContract
  extends Truffle.Contract<ExecutionTargetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ExecutionTargetInstance>;
}

export interface FakeAppConstantsContract
  extends Truffle.Contract<FakeAppConstantsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FakeAppConstantsInstance>;
}

export interface IACLContract extends Truffle.Contract<IACLInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IACLInstance>;
}

export interface IACLOracleContract
  extends Truffle.Contract<IACLOracleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IACLOracleInstance>;
}

export interface IEVMScriptExecutorContract
  extends Truffle.Contract<IEVMScriptExecutorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IEVMScriptExecutorInstance>;
}

export interface IEVMScriptRegistryContract
  extends Truffle.Contract<IEVMScriptRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IEVMScriptRegistryInstance>;
}

export interface IForwarderContract
  extends Truffle.Contract<IForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IForwarderInstance>;
}

export interface IForwarderFeeContract
  extends Truffle.Contract<IForwarderFeeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IForwarderFeeInstance>;
}

export interface IKernelContract extends Truffle.Contract<IKernelInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IKernelInstance>;
}

export interface IKernelEventsContract
  extends Truffle.Contract<IKernelEventsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IKernelEventsInstance>;
}

export interface InitializableContract
  extends Truffle.Contract<InitializableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<InitializableInstance>;
}

export interface InitializableStorageMockContract
  extends Truffle.Contract<InitializableStorageMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<InitializableStorageMockInstance>;
}

export interface InvalidBytesLengthConversionThrowsContract
  extends Truffle.Contract<InvalidBytesLengthConversionThrowsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<InvalidBytesLengthConversionThrowsInstance>;
}

export interface IVaultRecoverableContract
  extends Truffle.Contract<IVaultRecoverableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVaultRecoverableInstance>;
}

export interface KeccakConstantsContract
  extends Truffle.Contract<KeccakConstantsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<KeccakConstantsInstance>;
}

export interface KernelContract extends Truffle.Contract<KernelInstance> {
  "new"(
    _shouldPetrify: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelInstance>;
}

export interface KernelConstantsMockContract
  extends Truffle.Contract<KernelConstantsMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<KernelConstantsMockInstance>;
}

export interface KernelDepositableMockContract
  extends Truffle.Contract<KernelDepositableMockInstance> {
  "new"(
    _shouldPetrify: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelDepositableMockInstance>;
}

export interface KernelOverloadMockContract
  extends Truffle.Contract<KernelOverloadMockInstance> {
  "new"(
    _kernel: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelOverloadMockInstance>;
}

export interface KernelPinnedStorageMockContract
  extends Truffle.Contract<KernelPinnedStorageMockInstance> {
  "new"(
    _fakeApp: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelPinnedStorageMockInstance>;
}

export interface KernelProxyContract
  extends Truffle.Contract<KernelProxyInstance> {
  "new"(
    _kernelImpl: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelProxyInstance>;
}

export interface KernelSetAppMockContract
  extends Truffle.Contract<KernelSetAppMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<KernelSetAppMockInstance>;
}

export interface KernelStorageContract
  extends Truffle.Contract<KernelStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<KernelStorageInstance>;
}

export interface LifecycleMockContract
  extends Truffle.Contract<LifecycleMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LifecycleMockInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface PetrifiableContract
  extends Truffle.Contract<PetrifiableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PetrifiableInstance>;
}

export interface ProxyTargetWithFallbackContract
  extends Truffle.Contract<ProxyTargetWithFallbackInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ProxyTargetWithFallbackInstance>;
}

export interface ProxyTargetWithoutFallbackContract
  extends Truffle.Contract<ProxyTargetWithoutFallbackInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ProxyTargetWithoutFallbackInstance>;
}

export interface PublicResolverContract
  extends Truffle.Contract<PublicResolverInstance> {
  "new"(
    ensAddr: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<PublicResolverInstance>;
}

export interface ReentrancyGuardMockContract
  extends Truffle.Contract<ReentrancyGuardMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ReentrancyGuardMockInstance>;
}

export interface ReentrantActorContract
  extends Truffle.Contract<ReentrantActorInstance> {
  "new"(
    _reenterNonReentrant: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<ReentrantActorInstance>;
}

export interface RejectOracleContract
  extends Truffle.Contract<RejectOracleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RejectOracleInstance>;
}

export interface RepoContract extends Truffle.Contract<RepoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RepoInstance>;
}

export interface RevertOracleContract
  extends Truffle.Contract<RevertOracleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RevertOracleInstance>;
}

export interface SafeERC20MockContract
  extends Truffle.Contract<SafeERC20MockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SafeERC20MockInstance>;
}

export interface SafeMath64MockContract
  extends Truffle.Contract<SafeMath64MockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SafeMath64MockInstance>;
}

export interface SafeMath8MockContract
  extends Truffle.Contract<SafeMath8MockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SafeMath8MockInstance>;
}

export interface StateModifyingOracleContract
  extends Truffle.Contract<StateModifyingOracleInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<StateModifyingOracleInstance>;
}

export interface TargetContract extends Truffle.Contract<TargetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TargetInstance>;
}

export interface TestACLInterpreterContract
  extends Truffle.Contract<TestACLInterpreterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestACLInterpreterInstance>;
}

export interface TestConversionHelpersContract
  extends Truffle.Contract<TestConversionHelpersInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestConversionHelpersInstance>;
}

export interface TestDelegateProxyContract
  extends Truffle.Contract<TestDelegateProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestDelegateProxyInstance>;
}

export interface ThrowProxyContract
  extends Truffle.Contract<ThrowProxyInstance> {
  "new"(
    _target: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ThrowProxyInstance>;
}

export interface TimeHelpersMockContract
  extends Truffle.Contract<TimeHelpersMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TimeHelpersMockInstance>;
}

export interface TokenMockContract extends Truffle.Contract<TokenMockInstance> {
  "new"(
    initialAccount: string | BigNumber,
    initialBalance: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TokenMockInstance>;
}

export interface TokenReturnFalseMockContract
  extends Truffle.Contract<TokenReturnFalseMockInstance> {
  "new"(
    initialAccount: string | BigNumber,
    initialBalance: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TokenReturnFalseMockInstance>;
}

export interface TokenReturnMissingMockContract
  extends Truffle.Contract<TokenReturnMissingMockInstance> {
  "new"(
    initialAccount: string | BigNumber,
    initialBalance: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TokenReturnMissingMockInstance>;
}

export interface Uint256MockContract
  extends Truffle.Contract<Uint256MockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Uint256MockInstance>;
}

export interface UnsafeAppStubContract
  extends Truffle.Contract<UnsafeAppStubInstance> {
  "new"(
    _kernel: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<UnsafeAppStubInstance>;
}

export interface UnsafeAppStubDepositableContract
  extends Truffle.Contract<UnsafeAppStubDepositableInstance> {
  "new"(
    _kernel: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<UnsafeAppStubDepositableInstance>;
}

export interface UnsafeAragonAppContract
  extends Truffle.Contract<UnsafeAragonAppInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UnsafeAragonAppInstance>;
}

export interface UnsafeAragonAppMockContract
  extends Truffle.Contract<UnsafeAragonAppMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<UnsafeAragonAppMockInstance>;
}

export interface UnsafeRepoContract
  extends Truffle.Contract<UnsafeRepoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UnsafeRepoInstance>;
}

export interface UpgradedKernelContract
  extends Truffle.Contract<UpgradedKernelInstance> {
  "new"(
    _shouldPetrify: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<UpgradedKernelInstance>;
}

export interface VaultMockContract extends Truffle.Contract<VaultMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VaultMockInstance>;
}

export interface VaultRecoverableContract
  extends Truffle.Contract<VaultRecoverableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VaultRecoverableInstance>;
}

export interface AbstractENSInstance extends Truffle.ContractInstance {
  owner(
    _node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  resolver(
    _node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ttl(
    _node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setOwner: {
    (
      _node: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _node: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _node: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _node: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSubnodeOwner: {
    (
      _node: string | BigNumber,
      label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _node: string | BigNumber,
      label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _node: string | BigNumber,
      label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _node: string | BigNumber,
      label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setResolver: {
    (
      _node: string | BigNumber,
      _resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _node: string | BigNumber,
      _resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _node: string | BigNumber,
      _resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _node: string | BigNumber,
      _resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTTL: {
    (
      _node: string | BigNumber,
      _ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _node: string | BigNumber,
      _ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _node: string | BigNumber,
      _ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _node: string | BigNumber,
      _ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AcceptOracleInstance extends Truffle.ContractInstance {
  canPerform(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    arg3: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ACLInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  NO_PERMISSION(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_PERMISSIONS_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ANY_ENTITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  EMPTY_PARAM_HASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  BURN_ENTITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createPermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  grantPermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  grantPermissionP: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokePermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPermissionManager: {
    (
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removePermissionManager: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createBurnedPermission: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPermissionManager: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionParamsLength(
    _entity: string | BigNumber,
    _app: string | BigNumber,
    _role: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getPermissionParam(
    _entity: string | BigNumber,
    _app: string | BigNumber,
    _role: string | BigNumber,
    _index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getPermissionManager(
    _app: string | BigNumber,
    _role: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  evalParams(
    _paramsHash: string | BigNumber,
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface APMNamehashMockInstance extends Truffle.ContractInstance {
  getAPMNode(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAPMNamehash(
    name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface APMRegistryInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  registrar(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ens(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_REPO_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _registrar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _registrar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _registrar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _registrar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newRepo: {
    (
      _name: string,
      _dev: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _dev: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _name: string,
      _dev: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _dev: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newRepoWithVersion: {
    (
      _name: string,
      _dev: string | BigNumber,
      _initialSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _dev: string | BigNumber,
      _initialSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _name: string,
      _dev: string | BigNumber,
      _initialSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _dev: string | BigNumber,
      _initialSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface APMRegistryFactoryInstance extends Truffle.ContractInstance {
  registryBase(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ensSubdomainRegistrarBase(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ens(txDetails?: Truffle.TransactionDetails): Promise<string>;

  daoFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  repoBase(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAPM: {
    (
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface APMRegistryFactoryMockInstance
  extends Truffle.ContractInstance {
  registryBase(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ensSubdomainRegistrarBase(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ens(txDetails?: Truffle.TransactionDetails): Promise<string>;

  daoFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  repoBase(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newFailingAPM: {
    (
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      _withoutNameRole: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      _withoutNameRole: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      _withoutNameRole: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tld: string | BigNumber,
      _label: string | BigNumber,
      _root: string | BigNumber,
      _withoutNameRole: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AppProxyBaseInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppProxyFactoryInstance extends Truffle.ContractInstance {
  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AppProxyPinnedInstance extends Truffle.ContractInstance {
  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface AppProxyPinnedStorageMockInstance
  extends Truffle.ContractInstance {
  FAKE_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setPinnedCodeExt: {
    (
      _pinnedCode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pinnedCode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pinnedCode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pinnedCode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPinnedCodePosition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pinnedCodeExt(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppProxyUpgradeableInstance extends Truffle.ContractInstance {
  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface AppStorageInstance extends Truffle.ContractInstance {
  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppStorageMockInstance extends Truffle.ContractInstance {
  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setKernelExt: {
    (
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAppIdExt: {
    (
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getKernelPosition(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAppIdPosition(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppStubInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stringTest(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  requiresInitialization(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setValue: {
    (
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setValueParam: {
    (
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getValue(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface AppStub2Instance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stringTest(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getValue(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface AppStubConditionalRecoveryInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface AppStubDepositableInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  enableDeposits: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface AppStubScriptRunnerInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  runScript: {
    (script: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      script: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  runScriptWithBan: {
    (
      script: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      script: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  runScriptWithIO: {
    (
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  runScriptWithNewBytesAllocation: {
    (script: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      script: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AppStubStorageInstance extends Truffle.ContractInstance {
  stringTest(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AragonAppInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AssertInstance extends Truffle.ContractInstance {
  fail: {
    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isEmpty: {
    (
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isNotEmpty: {
    (
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      str: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isTrue: {
    (
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isFalse: {
    (
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAbove: {
    (
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAtLeast: {
    (
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isBelow: {
    (
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAtMost: {
    (
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: number | BigNumber | string,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isZero: {
    (
      number: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      number: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      number: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      number: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isNotZero: {
    (
      bts: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      bts: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      bts: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bts: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  equal: {
    (
      a: boolean,
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: boolean,
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: boolean,
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: boolean,
      b: boolean,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  notEqual: {
    (
      a: string,
      b: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: string,
      b: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: string,
      b: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: string,
      b: string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lengthEqual: {
    (
      arr: (number | BigNumber | string)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arr: (number | BigNumber | string)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arr: (number | BigNumber | string)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arr: (number | BigNumber | string)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lengthNotEqual: {
    (
      arr: (string | BigNumber)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arr: (string | BigNumber)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arr: (string | BigNumber)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arr: (string | BigNumber)[],
      length: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceEqual: {
    (
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceNotEqual: {
    (
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: string | BigNumber,
      b: number | BigNumber | string,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceIsZero: {
    (
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceIsNotZero: {
    (
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      a: string | BigNumber,
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AutopetrifiedInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface BaseEVMScriptExecutorInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface CallsScriptInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ConditionalOracleInstance extends Truffle.ContractInstance {
  canPerform(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    how: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface DAOFactoryInstance extends Truffle.ContractInstance {
  baseACL(txDetails?: Truffle.TransactionDetails): Promise<string>;

  regFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  baseKernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newDAO: {
    (
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DelegateProxyInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DepositableDelegateProxyInstance
  extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DepositableDelegateProxyMockInstance
  extends Truffle.ContractInstance {
  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  enableDepositsOnMock: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setImplementationOnMock: {
    (
      _implementationMock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _implementationMock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _implementationMock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _implementationMock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface DepositableStorageInstance extends Truffle.ContractInstance {
  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface DepositableStorageMockInstance
  extends Truffle.ContractInstance {
  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  setDepositableExt: {
    (_depositable: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _depositable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _depositable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _depositable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDepositablePosition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface EmptyDataReturnOracleInstance
  extends Truffle.ContractInstance {
  canPerform(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    arg3: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ENSInstance extends Truffle.ContractInstance {
  owner(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  resolver(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ttl(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setOwner: {
    (
      node: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSubnodeOwner: {
    (
      node: string | BigNumber,
      label: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      label: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      label: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      label: string | BigNumber,
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setResolver: {
    (
      node: string | BigNumber,
      resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      resolver: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTTL: {
    (
      node: string | BigNumber,
      ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      ttl: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ENSConstantsMockInstance extends Truffle.ContractInstance {
  getEnsRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getEthTldLabel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getEthTldNode(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getPublicResolverLabel(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPublicResolverNode(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ENSFactoryInstance extends Truffle.ContractInstance {
  newENS: {
    (
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ENSSubdomainRegistrarInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  POINT_ROOTNODE_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ens(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  DELETE_NAME_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  rootNode(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_NAME_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (
      _ens: string | BigNumber,
      _rootNode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _ens: string | BigNumber,
      _rootNode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _ens: string | BigNumber,
      _rootNode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _ens: string | BigNumber,
      _rootNode: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createName: {
    (
      _label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _label: string | BigNumber,
      _owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createNameAndPoint: {
    (
      _label: string | BigNumber,
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _label: string | BigNumber,
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _label: string | BigNumber,
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _label: string | BigNumber,
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteName: {
    (
      _label: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _label: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _label: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _label: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pointRootNode: {
    (
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    _who: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERCProxyInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ERCProxyMockInstance extends Truffle.ContractInstance {
  FORWARDING(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  UPGRADEABLE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EtherTokenConstantMockInstance
  extends Truffle.ContractInstance {
  getETHConstant(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EthSenderInstance extends Truffle.ContractInstance {
  sendEth: {
    (to: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface EVMScriptExecutorMockInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      _script: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _script: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _script: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _script: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EVMScriptExecutorNoReturnMockInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EVMScriptExecutorRevertMockInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ERROR_MOCK_REVERT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EVMScriptRegistryInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  REGISTRY_ADD_EXECUTOR_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  REGISTRY_MANAGER_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  executors(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean]>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  addScriptExecutor: {
    (
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  disableScriptExecutor: {
    (
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enableScriptExecutor: {
    (
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface EVMScriptRegistryConstantsMockInstance
  extends Truffle.ContractInstance {
  getEVMScriptRegistryAppId(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface EVMScriptRegistryFactoryInstance
  extends Truffle.ContractInstance {
  baseReg(txDetails?: Truffle.TransactionDetails): Promise<string>;

  baseCallScript(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newEVMScriptRegistry: {
    (_dao: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _dao: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _dao: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _dao: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface EVMScriptRunnerInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ExecutionTargetInstance extends Truffle.ContractInstance {
  ERROR_EXECUTION_TARGET(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  counter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  execute: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  failExecute(
    errorWithData: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setCounter: {
    (
      x: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      x: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      x: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      x: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FakeAppConstantsInstance extends Truffle.ContractInstance {
  FAKE_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IACLInstance extends Truffle.ContractInstance {
  initialize: {
    (
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hasPermission(
    who: string | BigNumber,
    where: string | BigNumber,
    what: string | BigNumber,
    how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IACLOracleInstance extends Truffle.ContractInstance {
  canPerform(
    who: string | BigNumber,
    where: string | BigNumber,
    what: string | BigNumber,
    how: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IEVMScriptExecutorInstance extends Truffle.ContractInstance {
  execScript: {
    (
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IEVMScriptRegistryInstance extends Truffle.ContractInstance {
  addScriptExecutor: {
    (
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  disableScriptExecutor: {
    (
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getScriptExecutor(
    script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IForwarderInstance extends Truffle.ContractInstance {
  isForwarder(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  canForward(
    sender: string | BigNumber,
    evmCallScript: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  forward: {
    (evmCallScript: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      evmCallScript: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      evmCallScript: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      evmCallScript: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IForwarderFeeInstance extends Truffle.ContractInstance {
  forwardFee(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;
}

export interface IKernelInstance extends Truffle.ContractInstance {
  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferToVault: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    who: string | BigNumber,
    where: string | BigNumber,
    what: string | BigNumber,
    how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setApp: {
    (
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    namespace: string | BigNumber,
    appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IKernelEventsInstance extends Truffle.ContractInstance {}

export interface InitializableInstance extends Truffle.ContractInstance {
  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface InitializableStorageMockInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getInitializationBlockPosition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface InvalidBytesLengthConversionThrowsInstance
  extends Truffle.ContractInstance {
  tryConvertLength: {
    (
      _badLength: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _badLength: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _badLength: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _badLength: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IVaultRecoverableInstance extends Truffle.ContractInstance {
  transferToVault: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface KeccakConstantsInstance extends Truffle.ContractInstance {
  APM_NODE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  REGISTRY_ADD_EXECUTOR_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pinnedCodePosition(txDetails?: Truffle.TransactionDetails): Promise<string>;

  depositablePosition(txDetails?: Truffle.TransactionDetails): Promise<string>;

  POINT_ROOTNODE_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_PERMISSIONS_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  PUBLIC_RESOLVER_NODE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  KERNEL_CORE_NAMESPACE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  CREATE_REPO_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  EVMSCRIPT_REGISTRY_APP_ID(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  KERNEL_APP_BASES_NAMESPACE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  KERNEL_APP_ADDR_NAMESPACE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  reentrancyGuardPosition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ETH_TLD_LABEL(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernelPosition(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ENS_ROOT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_VERSION_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  REGISTRY_MANAGER_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  DELETE_NAME_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  DEFAULT_VAULT_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  EMPTY_PARAM_HASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PUBLIC_RESOLVER_LABEL(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  EVMSCRIPT_EXECUTOR_CALLS_SCRIPT(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  appIdPosition(txDetails?: Truffle.TransactionDetails): Promise<string>;

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initializationBlockPosition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ETH_TLD_NODE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_NAME_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface KernelInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface KernelConstantsMockInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getKernelCoreNamespace(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getKernelAppBasesNamespace(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getKernelAppAddrNamespace(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getKernelAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getDefaultACLAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getDefaultVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface KernelDepositableMockInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  enableDeposits: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface KernelOverloadMockInstance extends Truffle.ContractInstance {
  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface KernelPinnedStorageMockInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  FAKE_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface KernelProxyInstance extends Truffle.ContractInstance {
  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface KernelSetAppMockInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface KernelStorageInstance extends Truffle.ContractInstance {
  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface LifecycleMockInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initializeMock: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  petrifyMock: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  lastCompletedMigration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgrade: {
    (
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PetrifiableInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface ProxyTargetWithFallbackInstance
  extends Truffle.ContractInstance {
  ping: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ProxyTargetWithoutFallbackInstance
  extends Truffle.ContractInstance {
  ping: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PublicResolverInstance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceID: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addr(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setAddr: {
    (
      node: string | BigNumber,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  content(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setContent: {
    (
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setName: {
    (
      node: string | BigNumber,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ABI(
    node: string | BigNumber,
    contentTypes: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  setABI: {
    (
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pubkey(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  setPubkey: {
    (
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  text(
    node: string | BigNumber,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setText: {
    (
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ReentrancyGuardMockInstance extends Truffle.ContractInstance {
  callCounter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nonReentrantCall: {
    (
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reentrantCall: {
    (
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReentrancyMutex: {
    (_mutex: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _mutex: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mutex: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mutex: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getReentrancyMutexPosition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ReentrantActorInstance extends Truffle.ContractInstance {
  reenter: {
    (
      _mock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _mock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mock: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RejectOracleInstance extends Truffle.ContractInstance {
  canPerform(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    arg3: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface RepoInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_VERSION_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  newVersion: {
    (
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLatest(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  getLatestForContractAddress(
    _contractAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  getBySemanticVersion(
    _semanticVersion: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  getByVersionId(
    _versionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  getVersionsCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isValidBump(
    _oldVersion: (number | BigNumber | string)[],
    _newVersion: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface RevertOracleInstance extends Truffle.ContractInstance {
  canPerform(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    arg3: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface SafeERC20MockInstance extends Truffle.ContractInstance {
  transfer: {
    (
      token: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      token: string | BigNumber,
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      token: string | BigNumber,
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    token: string | BigNumber,
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    token: string | BigNumber,
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface SafeMath64MockInstance extends Truffle.ContractInstance {
  mulExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  divExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  subExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  modExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface SafeMath8MockInstance extends Truffle.ContractInstance {
  mulExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  divExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  subExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  modExt(
    _a: number | BigNumber | string,
    _b: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface StateModifyingOracleInstance extends Truffle.ContractInstance {
  canPerform: {
    (
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: string | BigNumber,
      arg3: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: string | BigNumber,
      arg3: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: string | BigNumber,
      arg3: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      arg1: string | BigNumber,
      arg2: string | BigNumber,
      arg3: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TargetInstance extends Truffle.ContractInstance {
  dontReturn(txDetails?: Truffle.TransactionDetails): Promise<void>;

  fail(txDetails?: Truffle.TransactionDetails): Promise<void>;

  die: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TestACLInterpreterInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  createBurnedPermission: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPermissionManager: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  grantPermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionParamsLength(
    _entity: string | BigNumber,
    _app: string | BigNumber,
    _role: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  evalParams(
    _paramsHash: string | BigNumber,
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  NO_PERMISSION(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_PERMISSIONS_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  grantPermissionP: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  revokePermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionParam(
    _entity: string | BigNumber,
    _app: string | BigNumber,
    _role: string | BigNumber,
    _index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ANY_ENTITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removePermissionManager: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPermissionManager: {
    (
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionManager(
    _app: string | BigNumber,
    _role: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  createPermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  EMPTY_PARAM_HASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  BURN_ENTITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  testEqualityUint: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testEqualityAddr: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testEqualityBytes: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testInequalityUint: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testInequalityBytes: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testInequalityAddr: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testGreatherThan: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testLessThan: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testGreatherThanOrEqual: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testLessThanOrEqual: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testTimestamp: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testBlockNumber: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testOracle: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testReturn: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testNot: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testComplexCombination: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testParamOutOfBoundsFail: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testArgOutOfBoundsFail: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testIfElse: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testCombinators: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TestConversionHelpersInstance
  extends Truffle.ContractInstance {
  testUintArrayConvertedToBytes: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testUintArrayIntactIfConvertedBack: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testBytesConvertedToUintArray: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testBytesIntactIfConvertedBack: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testBytesConversionThrowsOnInvalidLength: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  assertValues: {
    (_data: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_data: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestDelegateProxyInstance extends Truffle.ContractInstance {
  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  beforeAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  beforeEach: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testFailIfNoContract: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  noContract: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testFailIfReverts: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertCall: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testIsContractZero: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testIsContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testDieIfMinReturn0: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ThrowProxyInstance extends Truffle.ContractInstance {
  target(txDetails?: Truffle.TransactionDetails): Promise<string>;

  assertThrows: {
    (_msg: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_msg: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _msg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _msg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assertItDoesntThrow: {
    (_msg: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_msg: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _msg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _msg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  execute: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TimeHelpersMockInstance extends Truffle.ContractInstance {
  getBlockNumberDirect(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getBlockNumberExt(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getBlockNumber64Ext(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTimestampDirect(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTimestampExt(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getTimestamp64Ext(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface TokenMockInstance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setAllowTransfer: {
    (_allowTransfer: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TokenReturnFalseMockInstance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setAllowTransfer: {
    (_allowTransfer: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TokenReturnMissingMockInstance
  extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setAllowTransfer: {
    (_allowTransfer: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _allowTransfer: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Uint256MockInstance extends Truffle.ContractInstance {
  convert(
    a: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface UnsafeAppStubInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getValue(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setValueParam: {
    (
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setValue: {
    (
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      i: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stringTest(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  requiresInitialization(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface UnsafeAppStubDepositableInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  enableDeposits: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface UnsafeAragonAppInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface UnsafeAragonAppMockInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getKernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setKernelOnMock: {
    (
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface UnsafeRepoInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getBySemanticVersion(
    _semanticVersion: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  newVersion: {
    (
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newSemanticVersion: (number | BigNumber | string)[],
      _contractAddress: string | BigNumber,
      _contentURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getByVersionId(
    _versionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getLatestForContractAddress(
    _contractAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isValidBump(
    _oldVersion: (number | BigNumber | string)[],
    _newVersion: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  CREATE_VERSION_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getLatest(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], string, string]>;

  getVersionsCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  canPerform(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface UpgradedKernelInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isUpgraded(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface VaultMockInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface VaultRecoverableInstance extends Truffle.ContractInstance {
  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;
}
