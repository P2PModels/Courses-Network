{"version":3,"sources":["../src/utils.js"],"names":["debug","params","process","env","NODE_ENV","console","getIconBySize","icons","size","sizes","map","icon","i","width","parseInt","split","isNaN","filter","sort","a","b","length","iconIndex","find","iconSize"],"mappings":"4HAAO,QAASA,CAAAA,KAAT,CAAgB,GAAGC,MAAnB,CAA2B,CACH,YAAzB,GAAAC,OAAO,CAACC,GAAR,CAAYC,QADgB,EAE9BC,OAAO,CAACL,KAAR,CAAc,GAAGC,MAAjB,CAEH,CAED;AACA;AACO,QAASK,CAAAA,aAAT,CAAwBC,KAAxB,CAA+BC,IAAI,CAAG,CAAC,CAAvC,CAA0C,CAC/C;AACA,KAAMC,CAAAA,KAAK,CAAGF,KAAK,CAChBG,GADW,CACP,CAACC,IAAD,CAAOC,CAAP,GAAa,CAChB,KAAMC,CAAAA,KAAK,CAAGC,QAAQ,CAACH,IAAI,CAACF,KAAL,CAAWM,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAA2B,EAA3B,CAAtB,CACA,MAAO,CAACH,CAAD,CAAII,KAAK,CAACH,KAAD,CAAL,CAAe,CAAC,CAAhB,CAAoBA,KAAxB,CACR,CAJW,EAKXI,MALW,CAKJT,IAAI,EAAgB,CAAC,CAAb,GAAAA,IAAI,CAAC,CAAD,CALR,EAMXU,IANW,CAMN,CAACC,CAAD,CAAIC,CAAJ,GAAUD,CAAC,CAAC,CAAD,CAAD,CAAOC,CAAC,CAAC,CAAD,CANZ,CAAd,CAQA;AACA,GAAqB,CAAjB,GAAAX,KAAK,CAACY,MAAV,CACE,MAAO,KAAP,CAGF;AACA,GAAa,CAAC,CAAV,GAAAb,IAAJ,CACE,MAAOD,CAAAA,KAAK,CAACE,KAAK,CAACA,KAAK,CAACY,MAAN,CAAe,CAAhB,CAAL,CAAwB,CAAxB,CAAD,CAAZ,CAGF;AACA;AACA,KAAMC,CAAAA,SAAS,CAAG,CAACb,KAAK,CAACc,IAAN,CAAWC,QAAQ,EAAIA,QAAQ,CAAC,CAAD,CAAR,EAAehB,IAAtC,GACjBC,KAAK,CAACA,KAAK,CAACY,MAAN,CAAe,CAAhB,CADW,EACS,CADT,CAAlB,CAEA,MAAOd,CAAAA,KAAK,CAACe,SAAD,CACb","sourcesContent":["export function debug (...params) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.debug(...params)\n  }\n}\n\n// Get the best icon for the given size.\n// Set size to -1 to get the largest one, or to 0 to get the smallest one.\nexport function getIconBySize (icons, size = -1) {\n  // Collect the sizes and sort them\n  const sizes = icons\n    .map((icon, i) => {\n      const width = parseInt(icon.sizes.split('x')[1], 10)\n      return [i, isNaN(width) ? -1 : width]\n    })\n    .filter(size => size[1] !== -1)\n    .sort((a, b) => a[1] - b[1])\n\n  // No valid size found\n  if (sizes.length === 0) {\n    return null\n  }\n\n  // No rendering size provided: return the largest icon.\n  if (size === -1) {\n    return icons[sizes[sizes.length - 1][0]]\n  }\n\n  // Find the first icon that is equal or larger than the provided size,\n  // or the largest one otherwise.\n  const iconIndex = (sizes.find(iconSize => iconSize[1] >= size) ||\n    sizes[sizes.length - 1])[0]\n  return icons[iconIndex]\n}\n"],"file":"utils.js"}