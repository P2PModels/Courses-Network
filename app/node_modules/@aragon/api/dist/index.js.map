{"version":3,"sources":["../src/index.js"],"names":["events","ACCOUNTS_TRIGGER","SYNC_STATUS_SYNCING","SYNC_STATUS_SYNCED","AppProxyHandler","get","target","name","receiver","params","rpc","sendAndObserveResponse","pipe","decorateAppWithIcons","icons","app","icon","size","src","AppProxy","constructor","provider","Messenger","accounts","sendAndObserveResponses","network","currentApp","installedApps","apps","map","getApps","identify","identifier","send","path","guiStyle","requestPath","emitTrigger","data","triggers","resolveAddressIdentity","address","requestAddressIdentityModification","searchIdentities","searchTerm","call","method","describeScript","script","describeTransaction","transaction","options","pastEvents","external","jsonInterface","eventsInterface","filter","item","type","contract","callMethods","constant","forEach","methodJsonDescription","intentMethods","requestSignMessage","message","web3Eth","cache","key","value","getCache","state","store","reducer","externals","init","wrappedReducer","event","Promise","resolve","lastEvent","err","console","error","getCurrentEvents","fromBlock","getPastEvents","cachedFromBlock","toBlock","initializationBlock","returnValues","from","to","cacheValue$","v","latestBlock$","initState$","initialState","initState","store$","cacheValue","latestBlock","Math","max","cachedState","block","cachedBlock","initialStoreState","pastEventsToBlock","events$","currentEvents$","accounts$","account","eventsWithTriggers$","toPromise","_","asyncScheduler","leading","trailing","connect","AragonApp","providers","MessagePortMessage","Proxy"],"mappings":"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","sourcesContent":["import { asyncScheduler, concat, defer, forkJoin, from, merge } from 'rxjs'\nimport {\n  catchError,\n  concatMap,\n  delayWhen,\n  endWith,\n  flatMap,\n  map,\n  mergeScan,\n  pluck,\n  publishReplay,\n  startWith,\n  switchMap,\n  tap,\n  throttleTime\n} from 'rxjs/operators'\nimport Messenger, { providers } from '@aragon/rpc-messenger'\nimport { debug, getIconBySize } from './utils'\n\nexport const events = {\n  ACCOUNTS_TRIGGER: 'ACCOUNTS_TRIGGER',\n  SYNC_STATUS_SYNCING: 'SYNC_STATUS_SYNCING',\n  SYNC_STATUS_SYNCED: 'SYNC_STATUS_SYNCED'\n}\n\nexport const AppProxyHandler = {\n  get (target, name, receiver) {\n    if (name in target) {\n      return target[name]\n    }\n\n    return function (...params) {\n      return target.rpc.sendAndObserveResponse(\n        'intent',\n        [name, ...params]\n      ).pipe(\n        pluck('result')\n      )\n    }\n  }\n}\n\nfunction decorateAppWithIcons ({ icons = [], ...app }) {\n  app.icon = (size = -1) => {\n    const icon = getIconBySize(icons, size)\n    if (icon && icon.src) {\n      return icon.src\n    }\n  }\n  return app\n}\n\n/**\n * A JavaScript proxy that wraps RPC calls to the wrapper.\n */\nexport class AppProxy {\n  constructor (provider) {\n    this.rpc = new Messenger(provider)\n  }\n\n  /**\n   * Get an array of the accounts the user currently controls over time.\n   *\n   * @return {Observable} Multi-emission Observable that emits an array of account addresses every time a change is detected.\n   */\n  accounts () {\n    return this.rpc.sendAndObserveResponses(\n      'accounts'\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get the network the app is connected to over time.\n   *\n   * @return {Observable} Multi-emission Observable that emits an object with the connected network's id and type every time the network changes.\n   */\n  network () {\n    return this.rpc.sendAndObserveResponses(\n      'network'\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get this app's information.\n   *\n   * @return {Observable} Single-emission Observable that emits the current app's information.\n   */\n  currentApp () {\n    // Note that we don't use an observe here as the currently running app should never have its\n    // internal details (e.g. proxy address, kernel address) and external details (e.g. ABI, name,\n    // description, etc.) change during run time.\n    //\n    // If these details ever change, the app should instead be restarted from the client running the\n    // app.\n    return this.rpc.sendAndObserveResponse(\n      'get_apps',\n      ['get', 'current']\n    ).pipe(\n      pluck('result'),\n      map(decorateAppWithIcons)\n    )\n  }\n\n  /**\n   * Get an array of the installed apps on the Kernel (organization) this app is attached to.\n   *\n   * @return {Observable} Multi-emission Observable that emits an array of installed Aragon apps on the Kernel every time a change is detected.\n   */\n  installedApps () {\n    return this.rpc.sendAndObserveResponses(\n      'get_apps',\n      ['observe', 'all']\n    ).pipe(\n      pluck('result'),\n      map((apps) => apps.map(decorateAppWithIcons))\n    )\n  }\n\n  /**\n   * DEPRECATED\n   * Get all installed apps on the Kernel\n   *\n   * @return {Observable} Multi-emission Observable that emits an array of installed Aragon apps on the Kernel every time a change is detected.\n   *\n   */\n  getApps () {\n    return this.rpc.sendAndObserveResponses(\n      'get_apps',\n      []\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Set the app identifier.\n   *\n   * This identifier is used to distinguish multiple instances of your app,\n   * so choose something that provides additional context to the app instance.\n   *\n   * Examples include: the name of a token that the app manages,\n   * the type of content that a TCR is curating, the name of a group etc.\n   *\n   * @param  {string} identifier The identifier of the app.\n   * @return {void}\n   */\n  identify (identifier) {\n    this.rpc.send(\n      'identify',\n      [identifier]\n    )\n  }\n\n  /**\n   * Get current path for the app. Useful for in-app routing and navigation.\n   *\n   * @return {Observable} Multi-emission Observable that emits the app's current path every time a change is detected.\n   */\n  path () {\n    return this.rpc.sendAndObserveResponses(\n      'path',\n      ['observe']\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get the current GUI style.\n   *\n   * @return {Observable} Multi-emission Observable that emits the current GUI style every time a change is detected.\n   */\n  guiStyle () {\n    return this.rpc.sendAndObserveResponses(\n      'gui_style',\n      ['observe']\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Request a new path.\n   *\n   * @return {Observable} Single-emission Observable that emits if the path request succeeded and errors if rejected\n   */\n  requestPath (path) {\n    return this.rpc.sendAndObserveResponse(\n      'path',\n      ['modify', path]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Emit an event trigger to all aragonAPI instances of your application.\n   *\n   * @param {string} name The name of the event\n   * @param {Object} [data] Optional event data\n   * @return {void}\n   */\n  emitTrigger (name, data) {\n    this.rpc.send('trigger', ['emit', name, data])\n  }\n\n  /**\n   * Subscribe to any emitted event triggers from all aragonAPI instances of your application.\n   *\n   * @return {Observable} Multi-emission Observable that emits new event triggers\n   */\n  triggers () {\n    return this.rpc.sendAndObserveResponses(\n      'trigger',\n      ['observe']\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Resolve an address' identity, using the highest priority provider.\n   *\n   * @param  {string} address Address to resolve.\n   * @return {Observable} Single-emission Observable that emits the resolved identity or null if not found\n   */\n  resolveAddressIdentity (address) {\n    return this.rpc.sendAndObserveResponse(\n      'address_identity',\n      ['resolve', address]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Request an address' identity be modified with the highest priority provider.\n   *\n   * The request is typically handled by the aragon client.\n   *\n   * @param  {string} address Address to modify.\n   * @return {Observable} Single-emission Observable that emits if the modification succeeded and errors if cancelled by the user\n   */\n  requestAddressIdentityModification (address) {\n    return this.rpc.sendAndObserveResponse(\n      'address_identity',\n      ['modify', address]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Search for identities that match a given search term.\n   *\n   * The request is typically handled by the Aragon client.\n   *\n   * @param  {string} searchTerm Search string\n   * @return {Observable} Single-emission Observable that emits with an array of any matching identities\n   */\n  searchIdentities (searchTerm) {\n    return this.rpc.sendAndObserveResponse(\n      'search_identities',\n      [searchTerm]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Perform a read-only call on the app's smart contract.\n   *\n   * @param  {string} method The name of the method to call.\n   * @param  {...*} params An optional variadic number of parameters. The last parameter can be the call options (optional). See the [web3.js doc](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#id16) for more details.\n   * @return {Observable} Single-emission Observable that emits the result of the call.\n   */\n  call (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'call',\n      [method, ...params]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Decodes an EVM callscript and tries to describe the transaction path that the script encodes.\n   *\n   * @param  {string} script The EVM callscript to describe\n   * @return {Observable} Single-emission Observable that emits the described transaction path. The emitted transaction path is an array of objects, where each item has a `destination`, `data` and `description` key.\n   */\n  describeScript (script) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_script',\n      [script]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Try to describe a transaction based on its input data.\n   *\n   * @param  {Object} transaction Transaction object\n   * @param  {string} transaction.data Transaction's bytes data\n   * @param  {string} transaction.to Transaction's to address\n   * @return {Observable} Single-emission Observable that emits the transaction's description, if describable. The result is an object holding a string `description` and an array of objects as `annotatedDescription`.\n   */\n  describeTransaction (transaction) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_transaction',\n      [transaction]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Subscribe for events on your app's smart contract\n   *\n   * @param  {object} [options] web3.eth.Contract.events()' options\n   *   Unless explicitly provided, fromBlock is always defaulted to this app's initializationBlock\n   * @return {Observable} Multi-emission Observable that emits [Web3 events](https://web3js.readthedocs.io/en/1.0/glossary.html#specification).\n   */\n  events (options = {}) {\n    return this.rpc.sendAndObserveResponses(\n      'events',\n      ['allEvents', options]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Fetch events from past blocks on your app's smart contract.\n   *\n   * @param  {object} [options] web3.eth.Contract.events()' options\n   *   Unless explicitly provided, fromBlock is always defaulted to this app's initializationBlock\n   * @return {Observable} Single-emission Observable that emits an array of [Web3 events](https://web3js.readthedocs.io/en/1.0/glossary.html#specification).\n   */\n  pastEvents (options = {}) {\n    return this.rpc.sendAndObserveResponse(\n      'past_events',\n      ['allEvents', options]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Creates a handle to interact with an external contract\n   * (i.e. a contract that is **not** your app's smart contract, such as a token).\n   *\n   * @param  {string} address The address of the external contract\n   * @param  {Array<Object>} jsonInterface The [JSON interface](https://solidity.readthedocs.io/en/latest/abi-spec.html#abi-json) of the external contract.\n   * @return {Object}  An external smart contract handle, containing the following methods:\n   *   - `events(options)`: subscribe for events on the external contract, returns a multi-emission Observable that emits events\n   *   - `pastEvents(options)`: fetch events from past blocks on the external contract, returns a single-emission Observable with an array of past events\n   *   - Calling any other method on the handle will send a call or an external intent to the smart contract and return a single-emission Observable with the result\n   */\n  external (address, jsonInterface) {\n    const eventsInterface = jsonInterface.filter((item) => item.type === 'event')\n\n    const contract = {\n      events: (options = {}) => {\n        return this.rpc.sendAndObserveResponses(\n          'external_events',\n          [address, eventsInterface, 'allEvents', options]\n        ).pipe(\n          pluck('result')\n        )\n      },\n      pastEvents: (options = {}) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_past_events',\n          [address, eventsInterface, 'allEvents', options]\n        ).pipe(\n          pluck('result')\n        )\n      }\n    }\n\n    // Bind calls\n    const callMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && item.constant\n    )\n    callMethods.forEach((methodJsonDescription) => {\n      contract[methodJsonDescription.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_call',\n          [address, methodJsonDescription, ...params]\n        ).pipe(\n          pluck('result')\n        )\n      }\n    })\n\n    // Bind non-call (ie. \"write\") methods for external intents\n    const intentMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && !item.constant\n    )\n    intentMethods.forEach((methodJsonDescription) => {\n      contract[methodJsonDescription.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_intent',\n          [address, methodJsonDescription, ...params]\n        ).pipe(\n          pluck('result')\n        )\n      }\n    })\n\n    return contract\n  }\n\n  /**\n   * Allow apps to sign arbitrary data via a RPC call\n   *\n   * @param  {string} message The message to sign\n   * @return {void}\n   */\n  requestSignMessage (message) {\n    return this.rpc\n      .sendAndObserveResponse('sign_message', [message])\n      .pipe(\n        pluck('result')\n      )\n  }\n\n  /**\n   * Invoke a whitelisted web3.eth function.\n   *\n   * @param  {string} method The method to call. Must be in the whitelisted group (mostly getters).\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} Single-emission Observable that emits the return value of the call.\n   */\n  web3Eth (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'web3_eth',\n      [method, ...params]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Set a value in the application cache.\n   *\n   * @param  {string} key The cache key to set a value for\n   * @param  {string} value The value to persist in the cache\n   * @return {string} Single-emission Observable that emits when the cache operation has been committed\n   */\n  cache (key, value) {\n    return this.rpc.sendAndObserveResponse(\n      'cache',\n      ['set', key, value]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get a value from the application cache.\n   *\n   * @param  {string} key The cache key to get a value for\n   * @return {Observable} Single-emission Observable with the value for the specified cache key\n   */\n  getCache (key) {\n    return this.rpc.sendAndObserveResponse(\n      'cache',\n      ['get', key]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Observe the cached application state over time.\n   *\n   * This method is also used to share state between the background script and front-end of your application.\n   *\n   * @return {Observable} Multi-emission Observable that emits the application state every time it changes. The type of the emitted values is application specific.\n   */\n  state () {\n    return this.rpc.sendAndObserveResponses(\n      'cache',\n      ['observe', 'state']\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Application store constructor to be used in app script\n   * Listens for events, passes them through `reducer`, caches the resulting state and re-emits that state for easy chaining.\n   * Caches results to the `state` key to emit the new state for `api.state()` subscribers (e.g. a frontend).\n   *\n   * For caching purposes the event fetching is split into two steps:\n   *  - Fetching past events with `pastEvents`\n   *  - Subscribing to new events\n   *\n   * The reducer takes the signature `(state, event)` and should return either:\n   *  - a promise that resolves to state, even if it is unaltered by the event.\n   *  - a new state object\n   *\n   * Also note that the initial state is always `null`, not `undefined`, because of [JSONRPC](https://www.jsonrpc.org/specification) limitations.\n   *\n   * Optionally takes an options object with:\n   *   - `externals`: an array of external contracts to merge with this app's events,\n   *     for example you might use an external contract's Web3 events\n   *   - `init`: an initialization function run before events are passed through to the reducer,\n   *     useful for refreshing stale state from the contract (e.g. token balances)\n   *\n   * @param  {Function} reducer A function that reduces events to state. Can return a Promise that resolves to a new state.\n   * @param  {Object} [options] An optional options object\n   * @param  {Array.<{contract: Object, initializationBlock: String}>} [options.externals] An optional array of objects containing `contract` (as returned from `api.external`) and an optional `initializationBlock` from which to fetch events\n   * @param  {Function} [options.init] An optional initialization function for the state. Should return a promise that resolves to the init state.\n   * @return {Observable} Multi-emission Observable that emits the application state every time it changes. The type of the emitted values is application specific.\n   */\n  store (reducer, { externals = [], init } = {}) {\n    const CACHED_STATE_KEY = 'CACHED_STATE_KEY'\n    const BLOCK_REORG_MARGIN = 100\n\n    // Wrap the reducer in another reducer that allows us to execute code asynchronously\n    // in our reducer (due to the Promise wrapping). That's a lot of reducing.\n    //\n    // This is why we need the `mergeScan` operator below.\n    const wrappedReducer = ({ state }, event) =>\n      from(\n        // Ensure a promise is returned even if the reducer returns an array or throws\n        new Promise((resolve) => resolve(reducer(state, event)))\n      ).pipe(\n        map(state => ({ state, lastEvent: event })),\n        catchError((err) => {\n          console.error('Error from app reducer on event', err)\n          console.error('Current event', event)\n          console.error('Current state', state)\n          // Re-throw the error to stop the rest of the store() stream\n          throw err\n        })\n      )\n\n    const getCurrentEvents = (fromBlock) => merge(\n      this.events({ fromBlock }),\n      ...externals.map(({ contract }) => contract.events({ fromBlock }))\n    )\n\n    // If `cachedFromBlock` is null there's no cache, `pastEvents` will use the initializationBlock\n    // External contracts can specify their own `initializationBlock` which will be used in case the cache is empty,\n    // by default they will use the current app's initialization block.\n    const getPastEvents = (cachedFromBlock, toBlock) => merge(\n      this.pastEvents({ fromBlock: cachedFromBlock, toBlock }),\n      ...externals.map(\n        ({ contract, initializationBlock }) =>\n          contract.pastEvents({ fromBlock: cachedFromBlock || initializationBlock, toBlock })\n      )\n    ).pipe(\n      // single emission array of all pastEvents -> flatten to process events\n      flatMap(pastEvents => from(pastEvents)),\n      startWith({\n        event: events.SYNC_STATUS_SYNCING,\n        returnValues: {\n          from: cachedFromBlock,\n          to: toBlock\n        }\n      }),\n      endWith({\n        event: events.SYNC_STATUS_SYNCED,\n        returnValues: {}\n      })\n    )\n    const cacheValue$ = this.getCache(CACHED_STATE_KEY).pipe(\n      // ensure we always get at least an empty object instead of falsy\n      map(v => v || {}))\n    const latestBlock$ = this.web3Eth('getBlockNumber')\n    // init the app state with the cached state\n    const initState$ = init\n      ? cacheValue$.pipe(\n        switchMap(({ state }) => {\n          // Make sure `init()` gets a new copy of the cached state so that it doesn't\n          // accidentally manipulate the observable's object\n          const initialState = state ? { ...state } : null\n          return from(init(initialState))\n        }),\n        delayWhen((initState) => {\n          debug('- store - init state:', initState)\n          return this.cache('state', initState)\n        })\n      )\n      : from([null])\n\n    const store$ = forkJoin(cacheValue$, initState$, latestBlock$).pipe(\n      switchMap(([cacheValue, initState, latestBlock]) => {\n        const { state: cachedState, block: cachedBlock } = cacheValue\n        const initialStoreState = (init ? initState : cachedState) || null\n        debug('- store - initial store state', initialStoreState)\n        debug(`- store - cachedBlock ${cachedBlock} | latestBlock: ${latestBlock}`)\n\n        // The block up to which to fetch past events.\n        // The reduced state up to this point will be cached on every load\n        const pastEventsToBlock = Math.max(0, latestBlock - BLOCK_REORG_MARGIN)\n\n        if (cachedBlock !== undefined) {\n          debug(`- store - pastEvents: block ${cachedBlock} -> ${pastEventsToBlock} (${pastEventsToBlock - cachedBlock} blocks)`)\n        } else {\n          debug(`- store - pastEvents: initialization block -> ${pastEventsToBlock} (up to ${pastEventsToBlock} blocks)`)\n        }\n        debug(`- store - currentEvents$: block ${pastEventsToBlock} -> future`)\n\n        const events$ = concat(\n          // Past events\n          defer(() => getPastEvents(cachedBlock, pastEventsToBlock)),\n          // Current events\n          defer(() => {\n            // Fetch current events from block after cached block\n            const currentEvents$ = getCurrentEvents(pastEventsToBlock + 1)\n            // Observable which emits an web3.js event-like object with the address of the active account.\n            const accounts$ = this.accounts().pipe(\n              map(accounts => {\n                return {\n                  event: events.ACCOUNTS_TRIGGER,\n                  returnValues: {\n                    account: accounts[0]\n                  }\n                }\n              })\n            )\n\n            return merge(currentEvents$, accounts$)\n          })\n        )\n        const eventsWithTriggers$ = merge(events$, this.triggers())\n\n        return eventsWithTriggers$.pipe(\n          // Reduce\n          mergeScan(wrappedReducer, { state: initialStoreState }, 1),\n          // Cache commited state when past events have synced\n          tap(async ({ state, lastEvent = {} }) => {\n            if (lastEvent.event === events.SYNC_STATUS_SYNCED) {\n              debug(`- store - caching state (block ${pastEventsToBlock}):`, state)\n              const cacheState = {\n                block: pastEventsToBlock,\n                state\n              }\n\n              try {\n                await this.cache(CACHED_STATE_KEY, cacheState).toPromise()\n              } catch (_) {\n                console.error('Could not cache commited state')\n              }\n            }\n          }),\n          // Throttle to reduce rendering and caching overhead\n          // Must keep trailing to avoid discarding events\n          throttleTime(1000, asyncScheduler, { leading: false, trailing: true }),\n          // Use concatMap to ensure state is saved in the correct order\n          concatMap(async ({ state }) => {\n            debug('- store - reduced state:', state)\n            await this.cache('state', state).toPromise()\n\n            return state\n          })\n        )\n      }),\n      publishReplay(1)\n    )\n    store$.connect()\n\n    return store$\n  }\n}\n\n/**\n * This class is used to communicate with the wrapper in which the app is run.\n *\n * Every method in this class sends an RPC message to the wrapper through the provider.\n */\nexport default class AragonApp {\n  /**\n   * Create a connected AragonApp instance.\n   *\n   * @param {Object} [provider=MessagePortMessage] The provider used to send and receive messages to and from the wrapper.\n   */\n  constructor (provider = new providers.MessagePortMessage()) {\n    return new Proxy(\n      new AppProxy(provider),\n      AppProxyHandler\n    )\n  }\n}\n\n// Re-export the Aragon RPC providers\nexport { providers }\n"],"file":"index.js"}