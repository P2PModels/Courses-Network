{"id":"../node_modules/rxjs/_esm5/internal/operators/concatMap.js","dependencies":[{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/concatMap.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/src/internal/operators/concatMap.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/miapp/app/package.json","includedInParent":true,"mtime":1607969559907},{"name":"/Users/jonathanalmelaguerrero/miapp/app/.babelrc","includedInParent":true,"mtime":1607969559906},{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/package.json","includedInParent":true,"mtime":1607969929370},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/concatMap.js","resolved":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatMap = concatMap;\n\nvar _mergeMap = require(\"./mergeMap\");\n\n/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */\nfunction concatMap(project, resultSelector) {\n  return (0, _mergeMap.mergeMap)(project, resultSelector, 1);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":18}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":18},"generated":{"line":11,"column":19}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":26}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":27},"generated":{"line":11,"column":28}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":42}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":46},"generated":{"line":11,"column":44}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":33}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":40}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":42}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":56}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":58}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":59}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":60}}],"sources":{"../../../src/internal/operators/concatMap.ts":"import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function concatMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  return mergeMap(project, resultSelector, 1);\n}\n"},"lineCount":null}},"error":null,"hash":"826942a804f793d762b52f81f834810c","cacheData":{"env":{}}}