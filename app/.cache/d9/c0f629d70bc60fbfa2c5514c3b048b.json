{"id":"../node_modules/rxjs/_esm5/internal/operators/combineAll.js","dependencies":[{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/combineAll.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/src/internal/operators/combineAll.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/miapp/app/package.json","includedInParent":true,"mtime":1607969559907},{"name":"/Users/jonathanalmelaguerrero/miapp/app/.babelrc","includedInParent":true,"mtime":1607969559906},{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/package.json","includedInParent":true,"mtime":1607969929370},{"name":"../observable/combineLatest","loc":{"line":2,"column":38},"parent":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/combineAll.js","resolved":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/observable/combineLatest.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.combineAll = combineAll;\n\nvar _combineLatest = require(\"../observable/combineLatest\");\n\n/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */\nfunction combineAll(project) {\n  return function (source) {\n    return source.lift(new _combineLatest.CombineLatestOperator(project));\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":11,"column":19}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":31},"generated":{"line":11,"column":20}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":11,"column":27}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":36},"generated":{"line":11,"column":29}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":19}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":25}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":27}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":11}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":17}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":18}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":22}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":23}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":27}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":63}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":64}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":71}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":72}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":73}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":14,"column":3}}],"sources":{"../../../src/internal/operators/combineAll.ts":"import { CombineLatestOperator } from '../observable/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function combineAll<T>(): OperatorFunction<any, T[]>;\nexport function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n/**\n * Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\n *\n * ![](combineAll.png)\n *\n * `combineAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\n * it subscribes to all collected Observables and combines their values using the {@link combineLatest}</a> strategy, such that:\n *\n * * Every time an inner Observable emits, the output Observable emits\n * * When the returned observable emits, it emits all of the latest values by:\n *    * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\n *      arrived, and the result of the `project` function is what is emitted by the output Observable.\n *    * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\n *\n * ---\n *\n * ## Examples\n *\n * ### Map two click events to a finite interval Observable, then apply `combineAll`\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, combineAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev =>\n *      interval(Math.random() * 2000).pipe(take(3))\n *   ),\n *   take(2)\n * );\n * const result = higherOrder.pipe(\n *   combineAll()\n * );\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function(...values: Array<any>)} An optional function to map the most recent values from each inner Observable into a new result.\n * Takes each of the most recent values from each collected inner Observable as arguments, in order.\n * @return {Observable<T>}\n * @name combineAll\n */\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n"},"lineCount":null}},"error":null,"hash":"c277429658ff8462c8fc3ae1a929b6c6","cacheData":{"env":{}}}