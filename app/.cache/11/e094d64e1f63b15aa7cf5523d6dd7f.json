{"id":"../node_modules/rxjs/_esm5/internal/operators/auditTime.js","dependencies":[{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/auditTime.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/src/internal/operators/auditTime.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/miapp/app/package.json","includedInParent":true,"mtime":1607969559907},{"name":"/Users/jonathanalmelaguerrero/miapp/app/.babelrc","includedInParent":true,"mtime":1607969559906},{"name":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/package.json","includedInParent":true,"mtime":1607969929370},{"name":"../scheduler/async","loc":{"line":2,"column":22},"parent":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/auditTime.js","resolved":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/scheduler/async.js"},{"name":"./audit","loc":{"line":3,"column":22},"parent":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/auditTime.js","resolved":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/audit.js"},{"name":"../observable/timer","loc":{"line":4,"column":22},"parent":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/operators/auditTime.js","resolved":"/Users/jonathanalmelaguerrero/miapp/app/node_modules/rxjs/_esm5/internal/observable/timer.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.auditTime = auditTime;\n\nvar _async = require(\"../scheduler/async\");\n\nvar _audit = require(\"./audit\");\n\nvar _timer = require(\"../observable/timer\");\n\n/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */\nfunction auditTime(duration, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = _async.async;\n  }\n\n  return (0, _audit.audit)(function () {\n    return (0, _timer.timer)(duration, scheduler);\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":9}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":18}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":19}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":27}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":29}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":38}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":40}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":6}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":15}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":20}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":25}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":26}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":28}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":4}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":13}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":16}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":28}}],"sources":{"../../../src/internal/operators/auditTime.ts":"import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source value, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { auditTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n"},"lineCount":null}},"error":null,"hash":"a684a98e721495af2e0559155d09eb5a","cacheData":{"env":{}}}