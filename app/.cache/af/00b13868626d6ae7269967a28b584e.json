{"id":"../node_modules/rxjs/_esm5/internal/operators/switchAll.js","dependencies":[{"name":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/_esm5/internal/operators/switchAll.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/src/internal/operators/switchAll.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/jonathanalmelaguerrero/coursesNetwork/app/package.json","includedInParent":true,"mtime":1617092133777},{"name":"/Users/jonathanalmelaguerrero/coursesNetwork/app/.babelrc","includedInParent":true,"mtime":1607969559906},{"name":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/package.json","includedInParent":true,"mtime":1607969929370},{"name":"./switchMap","loc":{"line":2,"column":26},"parent":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/_esm5/internal/operators/switchAll.js","resolved":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/_esm5/internal/operators/switchMap.js"},{"name":"../util/identity","loc":{"line":3,"column":25},"parent":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/_esm5/internal/operators/switchAll.js","resolved":"/Users/jonathanalmelaguerrero/coursesNetwork/app/node_modules/rxjs/_esm5/internal/util/identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchAll = switchAll;\n\nvar _switchMap = require(\"./switchMap\");\n\nvar _identity = require(\"../util/identity\");\n\n/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */\nfunction switchAll() {\n  return (0, _switchMap.switchMap)(_identity.identity);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":18}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":13,"column":21}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":9}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":35}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":53}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":54}}],"sources":{"../../../src/internal/operators/switchAll.ts":"import {OperatorFunction, ObservableInput} from '../types';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function switchAll<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable\n * producing values only from the most recent observable sequence\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](switchAll.png)\n *\n * `switchAll` subscribes to a source that is an observable of observables, also known as a\n * \"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\n * provided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\n * to inner observable, such that only the most recent inner observable may be subscribed to at\n * any point in time. The resulting observable returned by `switchAll` will only complete if the\n * source observable completes, *and* any currently subscribed to inner observable also has completed,\n * if there are any.\n *\n * ## Examples\n * Spawn a new interval observable for each click event, but for every new\n * click, cancel the previous interval and subscribe to the new one.\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchAll, map, tap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\n * const source = clicks.pipe(map((ev) => interval(1000)));\n *\n * source.pipe(\n *   switchAll()\n * ).subscribe(x => console.log(x));\n *\n * // Output\n * // click\n * // 1\n * // 2\n * // 3\n * // 4\n * // ...\n * // click\n * // 1\n * // 2\n * // 3\n * // ...\n * // click\n * // ...\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link mergeAll}\n */\n\nexport function switchAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return switchMap(identity);\n}\n"},"lineCount":null}},"error":null,"hash":"de542d386a90884a17544d80f7d99595","cacheData":{"env":{}}}